Posibles nombres: 
	- TSTris (TST de T-Spin Triple y TS de TypeScript)

clase tetrimino:
	- atributo posicion (centro)

	- metodo traslacion que mueva el tetramino
	- metodo rotacion que controla la rotacion y los kicks

clase juego:

Controla toda la logica para jugar
	- atributo queue que lleva la lista de las piezas siguiente
	- atributo hold que guarda la pieza guardada
	- "constante" que tiene el tiempo que tarda la pieza en colocarse

	- metodo hold_piece que guarda la pieza
	- metodo gen_next_piece que genera la siguiente pieza

	- metodos que se ejecutan cuando una tecla se presiona (eventos)

clase renderer:

Dibuja en los canvas
	- Es necesario que la clase juego le pase todo lo necesario para renderizar (piezas, tablero, ...)

*****************
*** Problemas ***
*****************

- (solucionado) Rotacion discreta
	> (?) solucion:
	matrices de rotacion
	CW
	[0 -1]
	[1  0] 

	CCW
	[0  1]
	[-1 0]

	tuple rot_cw(center, pos){
	norm_pos = pos - center
	norm_rot_pos = (-norm_pos(y), norm_pos(x)) // CW * pos
	rot_pos = norm_rot_pos + center
	// operacion: (-pos(y) + center(y) + center(x), pos(x) - center(x) + center(y))
	}

	cw:
		x = cx - (y - cy)
		y = cy + (x - cx)

	ccw:
		x = cx + (y - cy)
		y = cy - (x - cx)

	para ccw es igual pero con la matriz de ccw
- (solucionado) Hard drop
- (solucionado) Controles, das y arr
- (solucionado) Centro del tetrimino para I y O ya que no estan en una celda sino en uno de los vertices (ver SRS)
	> (?) solucion: poner como *.5 la posicion del centro en el caso de I y O. El giro segun esta planteado
	funcionaria bien de esta manera
- (solucionado) Planteamiento de la matriz del tablero y el movimiento de la pieza actual
	> Traslaciones: 
		-- Primera idea: Antes de Tetrimino.move(...) se tiene que comprobar si la posicion despues de trasladar
		la pieza, se puede colocar o no
		-- Segunda idea: De alguna manera tener controlado que minos estan en cada lado, i.e. las posiciones
		de los minos que miran hacia arriba/abajo/derecha/izquierda
			Generar al principio las 4 caras de cada tetrimino. La idea es que al moverse a alguna direccion,
			solo se compruebe las posiciones de los minos de esa direccion
			Cuando se produzca una rotacion, solo es necesario cambiar los arrays dependiendo de si es cw o ccw
		-- Tercera idea: Guardar las posiciones que son adyacentes al tetrimino. De momento solo las de las 3
		direcciones principales (arriba no es necesario ***). De esta manera solo es necesario comprobar si 
		al intentar moverse en alguna direccion, las casillas adyacentes estan ocupadas o no.

		*** La unica manera de que un tetrimino vaya para arriba es que haya un kick y eso esta cubierto en las Rotaciones

		Otra manera de mejorar esto es solo guardar en el tablero las casillas que estan ocupadas. Asi no
		hace falta comprobar tantas posiciones. En un principio no esta muy claro si es mejor tener las 
		ocupadas o las que no. 

		Quiza array.filter tenga una funcion que ayude a hacer interseccion de arrays

		Quizas sea tambien util tener el tablero en forma de filas y de columnas. En forma de filas
		funciona mejor el movimiento horizontal y el de columnas el vertical

		Los minos de cada tetrimino estan determinados por la posicion del centro y de su orientacion

	> Rotaciones: (similar a las traslaciones pero hay que comprobar uno de tras de otro cada kick
	hasta que se pueda producir una rotacion o todas fallen)

- Caida infinita cuando se mueve < o >
	> No resetear el tiempo de bloqueo cuando NO se rota (es decir, resetear cuando solo se gira)

*****************
*** Por hacer ***
*****************

- Kicks para rotacion 180º
- Cambio de controles y DAS/ARR
- Cambio de opciones
- (?) Sistema de niveles y puntuacion
- Deteccion de T-Spines (ver SRS)
- Tileset, temas y mejoras visuales
	> (Mejoras visuales) CSS
- Mejoras en el movimiento general
	> Hacer un "pre-movimiento". Si el "pre-movimiento" se puede producir, fijarlo como movimiento
- (?) Socket.io para 1v1
- Habilitar/Deshabilitar funcionalidad (ghost piece, grid, ...) sin condicionales en cada iteracion de gameloop
	> (posible solucion) https://gamedev.stackexchange.com/a/55337